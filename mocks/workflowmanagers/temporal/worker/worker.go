// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock_worker

import (
	context "context"

	models "github.com/Zampfi/workflow-sdk-go/sdk/workflowmanagers/temporal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockWorker is an autogenerated mock type for the Worker type
type MockWorker struct {
	mock.Mock
}

type MockWorker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorker) EXPECT() *MockWorker_Expecter {
	return &MockWorker_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields: ctx, interruptCh, params
func (_m *MockWorker) Run(ctx context.Context, interruptCh <-chan interface{}, params models.RunWorkerParams) error {
	ret := _m.Called(ctx, interruptCh, params)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, <-chan interface{}, models.RunWorkerParams) error); ok {
		r0 = rf(ctx, interruptCh, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorker_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockWorker_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
//   - interruptCh <-chan interface{}
//   - params models.RunWorkerParams
func (_e *MockWorker_Expecter) Run(ctx interface{}, interruptCh interface{}, params interface{}) *MockWorker_Run_Call {
	return &MockWorker_Run_Call{Call: _e.mock.On("Run", ctx, interruptCh, params)}
}

func (_c *MockWorker_Run_Call) Run(run func(ctx context.Context, interruptCh <-chan interface{}, params models.RunWorkerParams)) *MockWorker_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(<-chan interface{}), args[2].(models.RunWorkerParams))
	})
	return _c
}

func (_c *MockWorker_Run_Call) Return(_a0 error) *MockWorker_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorker_Run_Call) RunAndReturn(run func(context.Context, <-chan interface{}, models.RunWorkerParams) error) *MockWorker_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockWorker) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorker_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockWorker_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockWorker_Expecter) Start(ctx interface{}) *MockWorker_Start_Call {
	return &MockWorker_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockWorker_Start_Call) Run(run func(ctx context.Context)) *MockWorker_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockWorker_Start_Call) Return(_a0 error) *MockWorker_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorker_Start_Call) RunAndReturn(run func(context.Context) error) *MockWorker_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: ctx
func (_m *MockWorker) Stop(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorker_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockWorker_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockWorker_Expecter) Stop(ctx interface{}) *MockWorker_Stop_Call {
	return &MockWorker_Stop_Call{Call: _e.mock.On("Stop", ctx)}
}

func (_c *MockWorker_Stop_Call) Run(run func(ctx context.Context)) *MockWorker_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockWorker_Stop_Call) Return(_a0 error) *MockWorker_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorker_Stop_Call) RunAndReturn(run func(context.Context) error) *MockWorker_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWorker creates a new instance of MockWorker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorker {
	mock := &MockWorker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
