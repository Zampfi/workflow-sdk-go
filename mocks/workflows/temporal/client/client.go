// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock_client

import (
	context "context"

	models "github.com/Zampfi/citadel/workflows/temporal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: ctx
func (_m *MockClient) Close(ctx context.Context) {
	_m.Called(ctx)
}

// MockClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) Close(ctx interface{}) *MockClient_Close_Call {
	return &MockClient_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *MockClient_Close_Call) Run(run func(ctx context.Context)) *MockClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_Close_Call) Return() *MockClient_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClient_Close_Call) RunAndReturn(run func(context.Context)) *MockClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Connect provides a mock function with given fields: ctx, params
func (_m *MockClient) Connect(ctx context.Context, params models.ConnectClientParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ConnectClientParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockClient_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - ctx context.Context
//   - params models.ConnectClientParams
func (_e *MockClient_Expecter) Connect(ctx interface{}, params interface{}) *MockClient_Connect_Call {
	return &MockClient_Connect_Call{Call: _e.mock.On("Connect", ctx, params)}
}

func (_c *MockClient_Connect_Call) Run(run func(ctx context.Context, params models.ConnectClientParams)) *MockClient_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.ConnectClientParams))
	})
	return _c
}

func (_c *MockClient_Connect_Call) Return(_a0 error) *MockClient_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Connect_Call) RunAndReturn(run func(context.Context, models.ConnectClientParams) error) *MockClient_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteAsyncWorkflow provides a mock function with given fields: ctx, params
func (_m *MockClient) ExecuteAsyncWorkflow(ctx context.Context, params models.ExecuteWorkflowParams) (models.WorkflowResponse, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteAsyncWorkflow")
	}

	var r0 models.WorkflowResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ExecuteWorkflowParams) (models.WorkflowResponse, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.ExecuteWorkflowParams) models.WorkflowResponse); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(models.WorkflowResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.ExecuteWorkflowParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_ExecuteAsyncWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteAsyncWorkflow'
type MockClient_ExecuteAsyncWorkflow_Call struct {
	*mock.Call
}

// ExecuteAsyncWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - params models.ExecuteWorkflowParams
func (_e *MockClient_Expecter) ExecuteAsyncWorkflow(ctx interface{}, params interface{}) *MockClient_ExecuteAsyncWorkflow_Call {
	return &MockClient_ExecuteAsyncWorkflow_Call{Call: _e.mock.On("ExecuteAsyncWorkflow", ctx, params)}
}

func (_c *MockClient_ExecuteAsyncWorkflow_Call) Run(run func(ctx context.Context, params models.ExecuteWorkflowParams)) *MockClient_ExecuteAsyncWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.ExecuteWorkflowParams))
	})
	return _c
}

func (_c *MockClient_ExecuteAsyncWorkflow_Call) Return(_a0 models.WorkflowResponse, _a1 error) *MockClient_ExecuteAsyncWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_ExecuteAsyncWorkflow_Call) RunAndReturn(run func(context.Context, models.ExecuteWorkflowParams) (models.WorkflowResponse, error)) *MockClient_ExecuteAsyncWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteSyncWorkflow provides a mock function with given fields: ctx, params
func (_m *MockClient) ExecuteSyncWorkflow(ctx context.Context, params models.ExecuteWorkflowParams) (models.WorkflowResponse, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteSyncWorkflow")
	}

	var r0 models.WorkflowResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ExecuteWorkflowParams) (models.WorkflowResponse, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.ExecuteWorkflowParams) models.WorkflowResponse); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(models.WorkflowResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.ExecuteWorkflowParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_ExecuteSyncWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteSyncWorkflow'
type MockClient_ExecuteSyncWorkflow_Call struct {
	*mock.Call
}

// ExecuteSyncWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - params models.ExecuteWorkflowParams
func (_e *MockClient_Expecter) ExecuteSyncWorkflow(ctx interface{}, params interface{}) *MockClient_ExecuteSyncWorkflow_Call {
	return &MockClient_ExecuteSyncWorkflow_Call{Call: _e.mock.On("ExecuteSyncWorkflow", ctx, params)}
}

func (_c *MockClient_ExecuteSyncWorkflow_Call) Run(run func(ctx context.Context, params models.ExecuteWorkflowParams)) *MockClient_ExecuteSyncWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.ExecuteWorkflowParams))
	})
	return _c
}

func (_c *MockClient_ExecuteSyncWorkflow_Call) Return(_a0 models.WorkflowResponse, _a1 error) *MockClient_ExecuteSyncWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_ExecuteSyncWorkflow_Call) RunAndReturn(run func(context.Context, models.ExecuteWorkflowParams) (models.WorkflowResponse, error)) *MockClient_ExecuteSyncWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
